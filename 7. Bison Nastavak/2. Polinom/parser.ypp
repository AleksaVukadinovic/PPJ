%{
  #include <iostream>
  #include <cstdlib>
  #include <map>
  #include <cmath>
  #include <vector>
  #include "Polinom.hpp"

  extern int yylex();

  void yyerror(std::string s) {
    std::cout << "Sintaksna greska: " << s << std::endl;
    exit(EXIT_FAILURE);
  }

  std::map<std::string, Polinom* p> promenljive;
%}

%union {
  std::string* s;
  double d;
  bool b;
  Polinom* p;
}

%left '+' '-'
%left '*' '/'
%right UMINUS
%left '\''
%left '['

%token POLY_T INT_T PRINT_T DEG_T EQ_T NEQ_T
%token<d> BROJ
%token<s> ID

%type<p> izraz polinom lista_brojeva
%type<b> logicka_naredba
%type<d> broj

%start program

%%
program: naredba program
| naredba
;

naredba: dodela ';' 
| PRINT_T '(' izraz ')' ';' {
  std::cout << (*$3) << std::endl;
  delete $3;
}
| logicka_naredba ';' {
  std::cout << ($1 ? "True" : "False") << std::endl;
}
;

dodela: POLY_T ID '=' izraz ';' {
  auto it = promenljive.find(*$2);
  if (it != promenljive.end())
    yyerror("Promenljiva je vec definisana");
  promenljive[*$2] = $4;
  delete $2;
}
| POLY_T ID ';' {
  auto it = promenljive.find(*$2);
  if (it != promenljive.end())
    yyerror("Promenljiva je vec definisana");
  promenljive[*$2] = new Polinom();
  delete $2;
}
| POLY_T ID '(' BROJ ')' ';' {
  auto it = promenljive.find(*$2);
  if (it != promenljive.end())
    yyerror("Promenljiva je vec definisana"); 
  promenljive[*$2] = new Polinom($4);
  delete $2;
}
| ID '=' izraz ';' {
  auto it = promenljive.find(*$1);
  if (it == promenljive.end())
    yyerror("Promenljiva nije definisana"); 
  delete it->second;
  promenljive[*$1] = $3;
  delete $1;
}
;

izraz: izraz '+' izraz {
  $$ = $1 + $3;
  delete $1;
  delete $3;
}
| izraz '-' izraz {
  $$ = $1 +=- $3;
  delete $1;
  delete $3;
  }
| izraz '*' izraz {
  $$ = $1 * $3;
  delete $1;
  delete $3;
}
| '(' izraz ')' {
  $$ = $2;
}
| '-' izraz %prec UMINUS {
  $$ = -$2;
}
| izraz '[' broj ']' {
  double rez = (*$1)[$3];
  delete $1;
  $$ = new Polinom();
  $$->dodajKoef(rez);
}
| DEG_T '(' izraz ')'{
  $$ = new Polinom();
  $$->dodajKoef($3->stepen());
  delete $3;
}
| BROJ {
  $$ = new Polinom();
  $$->dodajKoef($1);
}
| ID {
  auto it = promenljive.find(*$1);
  if (it == promenljive.end())
    yyerror("Promenljiva nije definisana");
  $$ = new Polinom(it->second);
  delete $1;
}
| polinom {
  $$ = $1;
}
| INT_T '(' izraz ',' broj ')' {
  $$ = $3->integral($5);
  delete $3;
}
| izraz '\''  {
  $$ = $1->izvod();
  delete $1;
}
;

broj: BROJ {
  $$ = $1;
}
| '-' BROJ {
  $$ = -$1;
}
;

polinom: '<' lista_brojeva '>' {
  $$ = $2;
}
;

lista_brojeva: lista_brojeva ',' broj {
  $1->dodajKoef($3);
  $$ = $1;
}
| broj {
  $$ = new Polinom();
  $$->dodajKoef($1);
}
;

logicka_naredba: izraz EQ_T izraz {
  $$ = *$1 == *$3;
  delete $1;
  delete $3;
} izraz NEQ_T izraz {
  $$ = *$1 != *$3;
  delete $1;
  delete $3;
}
;

%%

int main() {

}