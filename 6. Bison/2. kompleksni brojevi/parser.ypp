%{
  #include <iostream>
  #include <cstdlib>
  #include <map>
  #include "KompleksniBroj.hpp"

  extern int yylex();

  void yyerror(std::string s) {
    std::cerr << "Sintaksna greska: " << s << std::endl;
    exit(EXIT_FAILURE);
  }

  std::map<std::string, KompleksniBroj*> promenljive;
%}

%union {
  double v;
  bool b;
  std::string* s;
  KompleksniBroj* kb;
}

%left '+' '-'
%left '*' '/'
%right UMINUS
%right '~'

%token DEF_T PRINT_T ARG_T MOD_T RE_T IM_T EQ NEQ
%token<v> BROJ
%token<s> ID

%type<b> logicka_naredba;
%type<kb> kompleksni_broj izraz
%type<v> broj

%start program

%%
program: naredba program
| naredba
;

naredba: DEF_T ID ';' {
  auto it = promenljive.find(*$2);
  if ( it!= promenljive.end())
    yyerror("Promenljiva je vec definisana");
  promenljive[*$2] = new KompleksniBroj(0, 0);
  delete $2;
}
| DEF_T ID '=' izraz ';' {
  auto it = promenljive.find(*$2);
  if ( it!= promenljive.end())
    yyerror("Promenljiva je vec definisana");
  promenljive[*$2] = $4;
  delete $2;
}
| ID '=' izraz ';' {
  auto it = promenljive.find(*$1);
  if (it == promenljive.end())
    yyerror("Promenljiva nije definisana");
  delete it->second;
  it->second = $3;
  delete $1;
}
| PRINT_T '(' izraz ')' ';' {
  std::cout << (*$3) << std::endl; 
  delete $3;
}
| logicka_naredba ';' {    
  std::cout << ($1 ? "True" : "False") << std::endl;
}
;

logicka_naredba: izraz EQ izraz {
  $$ = *$1 == *$3; 
  delete $1; delete $3;
}
| izraz NEQ izraz {
  $$ = *$1 != *$3; 
  delete $1; delete $3;
}
;

izraz: izraz '+' izraz  {
  $$ = *$1 + *$3; 
  delete $1; 
  delete $3;
}
| izraz '-' izraz {
  $$ = *$1 - *$3; 
  delete $1; 
  delete $3;
}
| izraz '*' izraz {
  $$ = *$1 * *$3; 
  delete $1; 
  delete $3;
}
| izraz '/' izraz {
  $$ = *$1 / *$3; 
  delete $1; 
  delete $3;
}
| '(' izraz ')' { 
  $$ = $2; 
}
| '-' izraz %prec UMINUS { 
  KompleksniBroj rez = -(*$2);
  $$ = new KompleksniBroj(rez.Re(), rez.Im()); 
  delete $2; 
}
| '~' izraz { 
  KompleksniBroj rez = ~(*$2);
  $$ = new KompleksniBroj(rez.Re(), Srez.Im()); 
  delete $2; 
}
| ID {
  auto it = promenljive.find(*$1);
  if (it == promenljive.end())
      yyerror("Promenljiva nije definisana");
  $$ = new KompleksniBroj(it->second->Re(), it->second->Im()
  );

  delete $1;
}
| BROJ { 
  $$ = new KompleksniBroj($1);
}
| kompleksni_broj {   
    $$ = $1;
}
| RE_T '(' izraz ')' {
    double rez = $3->Re();
    $$ = new KompleksniBroj(rez);
    delete $3;
}
| IM_T '(' izraz ')' {
    double rez = $3->Im();
    $$ = new KompleksniBroj(rez);
    delete $3;
}
| ARG_T '(' izraz ')' {
    double rez = $3->Arg();
    $$ = new KompleksniBroj(rez);
    delete $3;
}
| MOD_T '(' izraz ')' {
    double rez = $3->Moduo();
    $$ = new KompleksniBroj(rez);
    delete $3;
}
;

kompleksni_broj: '<' broj ',' broj '>' { 
  $$ = new KompleksniBroj($2, $4);
}
| '<' broj '>' { 
  $$ = new KompleksniBroj($2); 
}
;

broj: BROJ {   
  $$ = $1;    
}
| '-' BROJ {   
  $$ = -$2;   
};


%%

int main() {
  if (yyparse() == 0) 
      std::cout << "Sve ok" << std::endl;
  else         
    std::cout << "Sintaksna greska" << std::endl;

  for (auto it = promenljive.begin(); it != promenljive.end(); it++) 
      delete it->second;

  return 0;
}