%{
  #include <iostream>
  #include <cstdlib>
  #include <map>
  #include <vector>

  #include "SymbolTable.hpp"
  #include "SyntaxTree.hpp"

  extern int yylex();

  void yyerror(std::string s) {
    std::cerr << "Sintaksna greksa" << s << std::endl;
    exit(EXIT_FAILURE);
  }

  SymbolTable st;
  SyntaxTreeNode* root = nullptr;
%}

%union {
  std::string* s;
  double d;
  SyntaxTreeNode* stn;
}

%left '<' '>'
%left '+' '-'
%left '*' '/'
%right UMINUS
%right IFNOELSE
%right ELSE_T

%token DEF_T PRINT_T WHILE_T IF_T 
%token<s> ID_T
%token<d> NUM_T

%type<stn> program niz_naredbi naredba izraz naredba_dodele if_naredba print_naredba while_naredba blok_naredbi uslov

%start program

%%

program: niz_naredbi {
  root = $1;
  root->interpret(st);
}
;

niz_naredbi: niz_naredbi naredba {
  StatementSequneceNode* ssn = dynamic_cast<StatementSequneceNode*>($1);
  if (ssn == nullptr)
      yyerror("Niz naredbi greska");
  ssn->addNode($2);
  $$ = ssn;
}
| naredba {
  StatementSequneceNode* ssn = new StatementSequneceNode();
  ssn->addNode($1);
  $$ = ssn;
}
;

naredba: naredba_dodele {
  $$ = $1;
}
| print_naredba {
  $$ = $1;
}
| while_naredba {
  $$ = $1;
}
| if_naredba {
  $$ = $1;
}
;

naredba_dodele: DEF_T ID_T '=' izraz ';' {
  $$ = new AssignmentNode(*$2, $4);
  delete $2;
  delete $4;
}
| ID_T '=' izraz ';' {
  $$ = new UpdateNode(*$1, $3);
  delete $1;
  delete $3;
}
;

print_naredba: PRINT_T '(' izraz ')' ';' {
  $$ = new PrintNode($3);
  delete $3;
}
;

if_naredba: IF_T '(' uslov ')' blok_naredbi %prec IFNOELSE {
  $$ = new IfNode($3, $5);
  delete $3;
  delete $5;
}
| IF_T '(' uslov ')' blok_naredbi ELSE_T blok_naredbi %prec ELSE_T{
  $$ = new IfElseNode($3, $5, $7);
  delete $3;
  delete $5;
  delete $7;
}
;

while_naredba: WHILE_T '(' uslov ')' blok_naredbi {
  $$ = new WhileNode($3, $5);
  delete $3;
  delete $5;
}
;

blok_naredbi: '{' niz_naredbi '}' {
  $$ = $2;
}
;

uslov: izraz '>' izraz {
  $$ = new BinaryOperatorNode('>', $1, $3);
  delete $1;
  delete $3;
}
| izraz '<' izraz {
  $$ = new BinaryOperatorNode('<', $1, $3);
  delete $1;
  delete $3;
}
| izraz {
  $$ = $1;
}
;

izraz: izraz '+' izraz {
  $$ = new BinaryOperatorNode('+', $1, $3);
  delete $1;
  delete $3;
}
| izraz '-' izraz {
  $$ = new BinaryOperatorNode('-', $1, $3);
  delete $1;
  delete $3;
}
| izraz '*' izraz {
  $$ = new BinaryOperatorNode('*', $1, $3);
  delete $1;
  delete $3;
}
| izraz '/' izraz {
  $$ = new BinaryOperatorNode('/', $1, $3);
  delete $1;
  delete $3;
}
| '(' izraz ')' {
  $$ = $2;
}
| '-' izraz %prec UMINUS {
  $$ = new UnaryOperatorNode('-', $2);
  delete $2;
}
| ID_T {
  $$ = new IdentifierNode(*$1);
}
| NUM_T {
  $$ = new ConstantNode($1);
}
;
%%

int main() {
  if (yyparse() == 0) {
    std::cout << "Sve ok!" << std::endl;
  } else {
    std::cerr << "Sintaksna greska" << std::endl;
    exit(EXIT_FAILURE);
  }
  exit(EXIT_SUCCESS);
}