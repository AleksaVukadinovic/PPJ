%{
  #include <iostream>
  #include <cstdlib>
  #include <vector>

  #include "SymbolTable.hpp"
  #include "SyntaxTree.hpp"

  extern int yylex();

  void yyerror(std::string s) {
    std::cerr << "Sintaksna greska: " << s << std::endl;
    exit(EXIT_FAILURE);
  }

  SymbolTable st;
  SyntaxTreeNode* root = nullptr;
%}

%union {
  std::string* s;
  SyntaxTreeNode* stn;
}

%left EQ_T NEQ_T
%left '+' 
%left '*'
%right '~'
%nonassoc IF_T
%nonassoc ELSE_T

%token START_T END_T STDOUTPUT_T STDINPUT_T STDERR_T PRINTALL_T DEF_T LSHIFT_T RSHIFT_T 
%token<s> ID_T VAL_T

%type<stn> niz_naredbi naredba uslov izraz

%start program

%%

program: START_T niz_naredbi END_T {
  root = $2;
}
;

niz_naredbi: niz_naredbi naredba {
  $$ = $1;
  $$->addNode($2);
  delete $2;
}
| naredba {
  $$ = new StatementSequenceNode();
  $$->addNode($1);
  delete $1;
}
;

naredba: DEF_T ID_T ';' {
  $$ = new AssignmentNode(*$1, new ConstantNode(""));
  delete $1;
} 
| DEF_T ID_T '=' izraz ';' {
  $$ = new AssigmentNode(*$2, $4);
  delete $2;
  delete $4;
}
| ID_T '=' izraz ';' {
  $$ = new AssigmentNode(*$1, $3);
  delete $1;
  delete $3;
}
| STDERR_T LSHIFT_T izraz ';' {
  $$ = new STDErrorNode($3);
  delete $3;
}
| STDOUTPUT_T LSHIFT_T izraz ';' {
  $$ = new STDOutputNode($3);
  delete $3;
}
| STDINPUT_T RSHIFT_T ID_T ';' {
  $$ = new STDInputNode($3);
  delete $3;
}
| PRINTALL_T ';' {
  $$ = new PrintAllNode();
}
| IF_T '(' uslov ')' '{' naredba '}' ELSE_T '{' naredba '}' ';' {
  $$ = new IfElseNode($3, $6, $10);
  delete $3; delete $6; delete $10;
}
| IF_T '(' uslov ')' '{' naredba '}' ';' {
  $$ = new IfNode($3, $6);
  delete $3; delete $6;
}
;

uslov: izraz EQ_T izraz {
  $$ =new BinaryNode("==", $1, $3);
  delete $1; delete $3;
}
| izraz NEQ_T izraz {
  $$ =new  BinaryNode("!=", $1, $3);
  delete $1; delete $3;
}
;

izraz: izraz '+' izraz {
  $$ = new BinaryNode("+", $1, $3);
  delete $1; delete $3;
}
| izraz '*' izraz {
  $$ = new BinaryNode("*", $1, $3);
  delete $1; delete $3;
}
| '~' izraz {
  $$ = new UnaryNode("~", $1);
  delete $1;
}
| '(' izraz ')' {
  $$ = $2;
}
| ID_T {
  $$ = new IdentifierNode(*$1);
  delete $1;
}
| VAL_T {
  $$ = new ConstantNode(*$1);
  delete $1;
};


%%

int main() {
  if (yyparse() == 0 ) {
    std::cout << "Sve ok" << std::endl;
  } else {
    std::cerr << "Greska" << std::endl;
    exit(EXIT_FAILURE);
  }
  root->interpret();
  delete root;
  exit(EXIT_SUCCESS);
}