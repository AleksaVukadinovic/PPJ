%{
    #include <iostream>
    #include <map>
    #include <vector>
    #include <cstdlib>
    #include <bitset>

    #include "SymbolTable.hpp"
    #include "SyntaxTree.hpp"

    extern int yylex();

    void yyerror(std::string s) {
        std::cout << "Sintaksna greska: " << s << std::endl;
        exit(EXIT_FAILURE);
    }

    SymbolTable st;
    SyntaxTreeNode* root = nullptr;
%}

%union {
    std::string* s;
    int i;
    char c;
    SyntaxTreeNode* stn;
}

%left '|' '^' '&' LSHIFT_T RSHIFT_T
%left '+' '-'
%left '*' '/' '%'
%right UMINUS
%right '~'

%token PRINT_T EQ_T NEQ_T LSHIFT_T RSHIFT_T DEF_T
%token<s> ID_T
%token<i> NUM_T
%token<c> FORMAT_T

%type<stn> program naredba_stampanja niz_naredbi naredba naredba_dodele logicka_naredba prazna_naredba izraz

%start program

%%

program: niz_naredbi {
    root = $1;
    std::cout << "Sintaksno stablo uspesno napravljeno";
}
;

niz_naredbi: niz_naredbi naredba {
    StatementSequenceNode* ssn = dynamic_cast<StatementSequenceNode*>($1);
    if (ssn == nullptr)
        yyerror("Niz naredbi greska");
    ssn->addNode($2);
    $$ = ssn;
    delete $2;
}
| naredba {
    StatementSequenceNode* ssn = new StatementSequenceNode();
    ssn->addNode($1);
    delete $1;
    $$ = ssn;
}
;

naredba: naredba_dodele { $$ = $1; }
       | naredba_stampanja { $$ = $1; }
       | prazna_naredba { $$ = $1; }
;

naredba_dodele: DEF_T ID_T ';' {
    $$ = new AssignmentNode(*$2, new ConstantNode(0));
}
| DEF_T ID_T '=' izraz ';' {
    $$ = new AssignmentNode(*$2, $4);
    delete $4;
}
| ID_T '=' izraz ';' {
    $$ = new UpdateNode(*$1, $3);
    delete $3;
}
;

prazna_naredba: ';' {
    $$ = new EmptyNode();
}
;

naredba_stampanja: PRINT_T '(' FORMAT_T ',' izraz ')' ';' {
    $$ = new PrintNode($3, $5);
    delete $5;
}
| logicka_naredba ';' {
    $$ = $1;
}
;

logicka_naredba: izraz EQ_T izraz {
    $$ = new LogicNode($1, $3);
    delete $1;
    delete $3;
}
| izraz NEQ_T izraz {
    $$ = new LogicNode($1, $3);
    delete $1;
    delete $3;
}
;

izraz: izraz '+' izraz {
    $$ = new BinaryNode("+", $1, $3);
    delete $1;
    delete $3;
}
| izraz '-' izraz {
    $$ = new BinaryNode("-", $1, $3);
    delete $1;
    delete $3;
}
| izraz '*' izraz {
    $$ = new BinaryNode("*", $1, $3);
    delete $1;
    delete $3;
}
| izraz '/' izraz {
    $$ = new BinaryNode("/", $1, $3);
    delete $1;
    delete $3;
}
| izraz '%' izraz {
    $$ = new BinaryNode("%", $1, $3);
    delete $1;
    delete $3;
}
| izraz '&' izraz {
    $$ = new BinaryNode("&", $1, $3);
    delete $1;
    delete $3;
}
| izraz '|' izraz {
    $$ = new BinaryNode("|", $1, $3);
    delete $1;
    delete $3;
}
| izraz '^' izraz {
    $$ = new BinaryNode("^", $1, $3);
    delete $1;
    delete $3;
}
| izraz LSHIFT_T izraz {
    $$ = new BinaryNode("<<", $1, $3);
    delete $1;
    delete $3;
}
| izraz RSHIFT_T izraz {
    $$ = new BinaryNode(">>", $1, $3);
    delete $1;
    delete $3;
}
| '(' izraz ')' {
    $$ = $2;
}
| '~' izraz {
    $$ = new UnaryNode("~", $2);
    delete $2;
}
| '-' izraz %prec UMINUS {
    $$ = new UnaryNode("-", $2);
    delete $2;
}
| ID_T {
    $$ = new IdentifierNode(*$1);
}
| NUM_T {
    $$ = new ConstantNode($1);
}
;

%%

int main() {
    if (yyparse() == 0) {
        std::cout << "Sve ok" << std::endl;
    } else {
        std::cout << "Greska u parsiranju" << std::endl;
        exit(EXIT_FAILURE);
    }
    root->interpret(st);
    delete root;
    exit(EXIT_SUCCESS);
}
