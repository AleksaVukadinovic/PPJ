%{
 #include <iostream>
 #include <cstdlib>
 #include <map>
 #include <vector>

 #include "Function.hpp"
 #include "SymbolTable.hpp"
 #include "SyntaxTree.hpp"

 extern int yylex();

 void yyerror(std::string s) {
 std::cerr << "Sintaksna greska: " << s << std::endl;
 exit(EXIT_FAILURE);
 }

 SymbolTable st = new SymbolTable();
 SyntaxTree* root = nullptr();
%}

%union {
 double d;
 std::string* s;
 char c;
 SyntaxTreeNode* stn;
}

%left '+' '-' 
%left '*' '/'
%right UMINUS
%left '\''
%left '['


%token SIN_T COS_T TAN_T COT_T EXP_T LOG_T POW_T SQRT_T
%token<s> X_T ID_T
%token<d> NUM_T

%type<stn> funkcija izraz broj naredba niz_naredbi

%start program

%%

program: niz_naredbi {
  $1->interpret(st);
  root = $1;
}
;

niz_naredbi: niz_naredbi naredba {
  $$ = $1;
  $$->push_back($2);
}
| naredba {
  SequenceNode* ss = dynamic_cast<SequenceNode*>$1;
  if (ss == nullptr)
    yyerror("Pointer mismatch");
  ss->add($1);
  $$ = ss;
}
;

naredba: ID_T '=' izraz '\n' {
  $$ = new AssignmentNode($1, $3);
  delete $1;
}
| izraz '\n' {
  $$ = new PrintNode($1);
}
| '\n' {
  $$ = new EmptyNode();
}
;

izraz: izraz '+' izraz {
  $$ = new BinaryNode('+', $1, $3);
}
| izraz '-' izraz {
  $$ = new BinaryNode('-', $1, $3); 
}
| izraz '*' izraz {
  $$ = new BinaryNode('*', $1, $3);
}
| izraz '/' izraz {
  $$ = new BinaryNode('/', $1, $3);
}
| '-' izraz %prec UMINUS {
  $$ = new ReverseNode($2)
}
| '(' izraz ')' {
  $$ = $2;
}
| izraz '\'' {
  $$ = new DiffNode($1);
}
| izraz '[' broj ']' {
  $$ = new ValueNode($1, $3);
}
| funkcija { 
  $$ = $1;
}
;

funkcija: SIN_T '(' izraz ')' {
  $$ = new SinNode($3);
}
| COS_T '(' izraz ')' {
  $$ = new CosNode($3);
} 
| TAN_T '(' izraz ')' {
  $$ = new TanNode($3);
}
| COT_T '(' izraz ')' {
  $$ = new CotNode($3);
}
| LOG_T '(' izraz ')' {
  $$ = new LogNode($3);
}
| EXP_T '(' izraz ')' {
  $$ = new ExpNode($3);
}
| POW_T '(' izraz ',' broj ')' {
  $$ = new PowNode($3);
}
| SQRT_T '(' izraz ')' {
  $$ = new SqrtNode($3);
}
| X_T { 
  $$ = new IdentityNode();
}
| ID_T {
  $$ = new IdentifierNode(*$1);
  delete $1;
}
| ID_T '(' izraz ')' {
  $$ = new CompositionNode(*$1, $3);
  delete $1;
}
| NUM_T {
  $$ = new ConstantFunctionNode($1);
}
;

broj: NUM_T { 
  $$ = new ConstantNode($1);
}
| '-' NUM_T {
  $$ = new ConstantNode(-$2);
}
;

%%

int main() {
 if (yyparse() == 0) {
 std::cout << "Sve ok" << std::endl
 std::cout << (*stn) << std::endl;
 delete stn;
 } else {
  std::cerr << "Sintaksna greska" << std::endl;
 }

 exit(EXIT_SUCCESS);
}